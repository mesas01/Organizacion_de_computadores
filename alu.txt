-------------------------------------------------------------------------------------------------------------------------
-- Libraries --
LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.all;
USE IEEE.NUMERIC_STD.all;
 -------------------------------------------------------------------------------------------------------------------------
 ENTITY alu is
 GENERIC (MAX_WIDTH		 :	INTEGER :=8); -- Tamaño de los vectores
	PORT (  bus_a  :  IN  STD_LOGIC_VECTOR (MAX_WIDTH-1 DOWNTO 0); -- Dato de entrada 1
			  bus_b  :  IN  STD_LOGIC_VECTOR (MAX_WIDTH-1 DOWNTO 0); -- Dato de entrada 2
			  selop  :  IN  STD_LOGIC_VECTOR ( 2  DOWNTO 0); -- Selector de operación
			  clk		:	IN  STD_LOGIC; -- Reloj del sistema
			  rst		:	IN  STD_LOGIC; -- Señal de reset
			  enaf   :  IN  STD_LOGIC; -- Enable del registro de banderas
           shamt  :  IN  STD_LOGIC_VECTOR ( 1 DOWNTO 0); -- Selector de desplazamiento
			  bus_c  :  OUT STD_LOGIC_VECTOR (MAX_WIDTH-1 DOWNTO 0); -- Resultado de la ALU
			  C,N,Z,P:	OUT STD_LOGIC); -- Banderas de la ALU
 END alu;
 -------------------------------------------------------------------------------------------------------------------------
 ARCHITECTURE ALU OF alu is 
 --Señales de interconexión--
 Signal Result : STD_LOGIC_VECTOR (MAX_WIDTH-1 DOWNTO 0); 
 Signal Carry  : STD_LOGIC;
 
 Begin
 Unity: ENTITY work.processing_unit --Llamado a la unidad de procesamiento
	PORT MAP( -- Interconexión de señales
		     dataa  => bus_a,
			  datab  => bus_b,
			  selop  => selop,
			  result => Result,
			  cout   => Carri);
 Shift: ENTITY work.shift_unit --Llamado a la unidad de desplazamiento
	PORT MAP( -- Interconexión de señales
	        dataa   => Result,
			  dataout => bus_c,
			  shamt   => shamt);
 Flag: ENTITY work.flag_register --Llamado al registro de banderas
	PORT MAP( -- Interconexión de señales
				clk	 	=> clk,
				rst		=> rst, 
				enaf		=> enaf,
				dataa		=> Result,
				carry		=> Carri,
				C     	=> C,
				N     	=> N,
				Z     	=> Z,
				P     	=> P);

END ARCHITECTURE ALU;